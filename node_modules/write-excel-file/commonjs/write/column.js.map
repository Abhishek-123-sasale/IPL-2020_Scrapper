{"version":3,"sources":["../../source/write/column.js"],"names":["DATE_COLUMN_DEFAULT_WIDTH","generateColumnDescription","column","index","type","Date","width","columnNumber","getColumnWidthInCharacters","columnWidthInPixels","maximumDigitWidth","characterWidth"],"mappings":";;;;;;;AAGA;;;;AAHA;AACA;AAIA,IAAMA,yBAAyB,GAAG,EAAlC;;AAEe,SAASC,yBAAT,CAAmCC,MAAnC,EAA2CC,KAA3C,EAAkD;AAC/D;AACA;AACA;AACA;AACA;AACA,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,EAAP;AACD,GAR8D,CAU/D;;;AACA,MAAIA,MAAM,CAACE,IAAP,KAAgBC,IAAhB,IAAwB,CAACH,MAAM,CAACI,KAApC,EAA2C;AACzCJ,IAAAA,MAAM,CAACI,KAAP,GAAeN,yBAAf;AACD,GAb8D,CAe/D;AACA;;;AACA,MAAI,CAACE,MAAM,CAACI,KAAZ,EAAmB;AACjB,WAAO,EAAP;AACD,GAnB8D,CAqB/D;;;AACA,MAAMC,YAAY,GAAGJ,KAAK,GAAG,CAA7B,CAtB+D,CAwB/D;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,8BAAoBI,YAApB,sBAA0CA,YAA1C,wBAAkEL,MAAM,CAACI,KAAzE,4BAtC+D,CAwC/D;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,0BAAT,CAAoCC,mBAApC,EAAyD;AACvD;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAA1B,CALuD,CAK3B;AAE5B;AACA;;AACA,MAAMC,cAAc,GAAG,gCAAiB,CAACF,mBAAmB,GAAG,CAAvB,IAA4BC,iBAA7B,GAAkD,GAAnD,GAA0D,GAAzE,IAAgF,GAAvG,CATuD,CAWvD;AACA;;AACA,SAAO,gCAAgB,CAAEC,cAAc,GAAGD,iBAAlB,GAAuC,CAAxC,IAA6CA,iBAA9C,GAAmE,GAAlF,IAAyF,GAAhG;AACD","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/cols/formatCols.js\r\n\r\nimport floatToInteger from './floatToInteger'\r\n\r\nconst DATE_COLUMN_DEFAULT_WIDTH = 14\r\n\r\nexport default function generateColumnDescription(column, index) {\r\n  // Guards against a developer forgetting to put some columns\r\n  // in the `columns` list when not using a `schema`.\r\n  // For example, a developer may pass `data` with `7` columns\r\n  // but only specify `6` of them in the `columns` list.\r\n  // Hence, it handles missing column description here.\r\n  if (!column) {\r\n    return ''\r\n  }\r\n\r\n  // Dates usually don't fit in the default column width.\r\n  if (column.type === Date && !column.width) {\r\n    column.width = DATE_COLUMN_DEFAULT_WIDTH\r\n  }\r\n\r\n  // If no width specified (0 width is not allowed as well), then\r\n  // leave the definition empty and the width will be applied automatically.\r\n  if (!column.width) {\r\n    return ''\r\n  }\r\n\r\n  // To ensure the column number starts as in Excel.\r\n  const columnNumber = index + 1\r\n\r\n  // // Column \"style\".\r\n  // // It's unclear what exactly does it mean.\r\n  // // Something like font, etc.\r\n  // // Is an integer \"enum\": perhaps, it can be one of the pre-defined styles in an Excel editor.\r\n  // // Perhaps could be omitted.\r\n  // // The default seems to be `1`.\r\n  // const style = column.style ? column.style : 1\r\n\r\n  // `column` format is described here:\r\n  // https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.column.aspx\r\n  //\r\n  // `customWidth=\"1\"` is required in order for `width=\"...\"` to be applied.\r\n  // Otherwise, Microsoft Office 2007 Excel wouldn't apply the custom column `width`.\r\n  //\r\n  return `<col min=\"${columnNumber}\" max=\"${columnNumber}\" width=\"${column.width}\" customWidth=\"1\"/>`\r\n\r\n  // The `style` attribute doesn't seem to be required.\r\n  // style=\"${style}\"\r\n}\r\n\r\n/**\r\n * Returns column width in characters.\r\n * Column width is measured as the number of characters of the maximum digit width\r\n * of the numbers 0, 1, 2, …, 9 as rendered in the normal style's font.\r\n * There are 4 pixels of margin padding (two on each side), plus 1 pixel padding\r\n * for the gridlines.\r\n * @param {number} widthInPixels — Target column width in pixels.\r\n * @return {number}\r\n */\r\nfunction getColumnWidthInCharacters(columnWidthInPixels) {\r\n  // Using the Calibri font as an example,\r\n  // the maximum digit width of 11 point font size is 7 pixels (at 96 dpi).\r\n  // `6` is for \"Calibri\" font of size `12`.\r\n  // TODO make it configurable?\r\n  const maximumDigitWidth = 6 // in pixels\r\n\r\n  // To translate from pixels to character width, use this calculation:\r\n  // =Truncate(({pixels}-5)/{Maximum Digit Width} * 100+0.5)/100\r\n  const characterWidth = floatToInteger((((columnWidthInPixels - 5) / maximumDigitWidth) * 100) + 0.5) / 100\r\n\r\n  // To translate from character width to real width, use this calculation:\r\n  // =Truncate([{Number of Characters} * {Maximum Digit Width} + {5 pixel padding}]/{Maximum Digit Width}*256)/256\r\n  return floatToInteger((((characterWidth * maximumDigitWidth) + 5) / maximumDigitWidth) * 256) / 256\r\n}"],"file":"column.js"}