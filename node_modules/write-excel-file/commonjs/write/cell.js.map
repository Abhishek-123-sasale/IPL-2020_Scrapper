{"version":3,"sources":["../../source/write/cell.js"],"names":["generateCell","rowNumber","columnIndex","value","type","cellStyleId","getSharedString","isEmpty","Date","Error","xml","undefined","String","getXlsxValue","getXlsxType","escapeString","string","replace","Number","Boolean","name"],"mappings":"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","sourcesContent":["// import Integer, { isInteger } from '../types/Integer'\r\n// import URL, { isURL } from '../types/URL'\r\n// import Email, { isEmail } from '../types/Email'\r\n\r\nimport generateCellNumber from './generateCellNumber'\r\nimport convertDateToExcelSerial from './convertDateToExcelSerial'\r\n\r\nexport default function generateCell(\r\n  rowNumber,\r\n  columnIndex,\r\n  value,\r\n  type,\r\n  cellStyleId,\r\n  getSharedString\r\n) {\r\n  // Empty cells could be skipped completely,\r\n  // if they don't have a style applied to them,\r\n  // like border or background color.\r\n  if (isEmpty(value)) {\r\n    if (!cellStyleId) {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  // Validate date format.\r\n  if (type === Date && !cellStyleId) {\r\n    throw new Error('No \"format\" has been specified for a Date cell')\r\n  }\r\n\r\n  let xml = `<c r=\"${generateCellNumber(columnIndex, rowNumber)}\"`\r\n\r\n  // Available formatting style IDs (built-in in Excel):\r\n  // https://xlsxwriter.readthedocs.io/format.html#format-set-num-format\r\n  // `2` — 0.00\r\n  // `3` —  #,##0\r\n  if (cellStyleId) {\r\n    // From the attribute s=\"12\" we know that the cell's formatting is stored at the 13th (zero-based index) <xf> within the <cellXfs>\r\n    xml += ` s=\"${cellStyleId}\"`\r\n  }\r\n\r\n  if (isEmpty(value)) {\r\n    return xml + '/>'\r\n  }\r\n\r\n  // The default cell type is `String`.\r\n  if (type === undefined) {\r\n    type = String\r\n    value = String(value)\r\n  }\r\n\r\n  value = getXlsxValue(type, value, getSharedString)\r\n  type = getXlsxType(type)\r\n\r\n  // The default value for `t` is `\"n\"` (a number or a date).\r\n  if (type) {\r\n    xml += ` t=\"${type}\"`\r\n  }\r\n\r\n  return xml + '>' +\r\n    (type === 'inlineStr' ? '<is><t>' : '<v>') +\r\n    value +\r\n    (type === 'inlineStr' ? '</t></is>' : '</v>') +\r\n    '</c>'\r\n}\r\n\r\n/**\r\n * Escapes text for XML: replaces \">\" with \"&gt;\", etc.\r\n * https://en.wikipedia.org/wiki/Character_encodings_in_HTML#HTML_character_references\r\n * @param  {string} string\r\n * @return {string}\r\n */\r\nfunction escapeString(string) {\r\n  return string\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/</g, '&lt;')\r\n}\r\n\r\nfunction isEmpty(value) {\r\n  return value === undefined || value === null || value === ''\r\n}\r\n\r\nfunction getXlsxType(type) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      return 's'\r\n      // // \"inlineStr\" type is used instead of \"s\" to avoid creating a \"shared strings\" index.\r\n      // return 'inlineStr'\r\n\r\n    case Number:\r\n    // case Integer:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Date:\r\n      // `n` is the default cell type (if no `t` has been specified).\r\n      // return 'n'\r\n      return\r\n\r\n    case Boolean:\r\n      return 'b'\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}\r\n\r\nfunction getXlsxValue(type, value, getSharedString) {\r\n  // Available Excel cell types:\r\n  // https://github.com/SheetJS/sheetjs/blob/19620da30be2a7d7b9801938a0b9b1fd3c4c4b00/docbits/52_datatype.md\r\n  //\r\n  // Some other document (seems to be old):\r\n  // http://webapp.docx4java.org/OnlineDemo/ecma376/SpreadsheetML/ST_CellType.html\r\n  //\r\n  switch (type) {\r\n    case String:\r\n    // case Email:\r\n    // case URL:\r\n      // if (type === Email && !isEmail(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Email`)\r\n      // }\r\n      // if (type === URL && !isURL(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected a URL`)\r\n      // }\r\n      value = escapeString(value)\r\n      return getSharedString(value)\r\n\r\n    case Number:\r\n    // case Integer:\r\n      if (typeof value !== 'number') {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a number`)\r\n      }\r\n      // if (type === Integer && !isInteger(value)) {\r\n      //   throw new Error(`Invalid cell value: ${value}. Expected an Integer`)\r\n      // }\r\n      return String(value)\r\n\r\n    case Date:\r\n      if (!(value instanceof Date)) {\r\n        throw new Error(`Invalid cell value: ${value}. Expected a Date`)\r\n      }\r\n      // \"d\" type doesn't seem to work.\r\n      // return value.toISOString()\r\n      return String(convertDateToExcelSerial(value))\r\n\r\n    case Boolean:\r\n      return value ? '1' : '0'\r\n\r\n    default:\r\n      throw new Error(`Unknown schema type: ${type && type.name || type}`)\r\n  }\r\n}"],"file":"cell.js"}