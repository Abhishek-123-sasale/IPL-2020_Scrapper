{"version":3,"sources":["../../source/write/generateMergedCellsDescription.js"],"names":["generateCellNumber","generateMergedCellsDescription","data","schema","mergedCells","rowIndex","length","row","columnIndex","span","rowSpan","rowNumber","push","map","coordinates","join"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,sBAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,8BAAT,CAAwCC,IAAxC,QAA0D;AAAA,MAAVC,MAAU,QAAVA,MAAU;;AACxE,MAAIA,MAAJ,EAAY;AACX,WAAO,EAAP;AACA;;AACD,MAAMC,WAAW,GAAG,EAApB;AACA,MAAIC,QAAQ,GAAG,CAAf;;AACA,SAAOA,QAAQ,GAAGH,IAAI,CAACI,MAAvB,EAA+B;AAC9B,QAAMC,GAAG,GAAGL,IAAI,CAACG,QAAD,CAAhB;AACA,QAAIG,WAAW,GAAG,CAAlB;;AACA,WAAOA,WAAW,GAAGD,GAAG,CAACD,MAAzB,EAAiC;AAChC,6BAA0BC,GAAG,CAACC,WAAD,CAA7B;AAAA,UAAQC,IAAR,oBAAQA,IAAR;AAAA,UAAcC,OAAd,oBAAcA,OAAd;;AACA,UAAID,IAAJ,EAAU;AACT,YAAME,SAAS,GAAGN,QAAQ,GAAG,CAA7B;AACAD,QAAAA,WAAW,CAACQ,IAAZ,CACCZ,kBAAkB,CAACQ,WAAD,EAAcG,SAAd,CAAlB,GACA,GADA,GAEAX,kBAAkB,CAACQ,WAAW,GAAGC,IAAd,GAAqB,CAAtB,EAAyBE,SAAS,IAAID,OAAO,GAAGA,OAAO,GAAG,CAAb,GAAiB,CAA5B,CAAlC,CAHnB;AAKA;;AACDF,MAAAA,WAAW;AACX;;AACDH,IAAAA,QAAQ;AACR;;AACD,MAAID,WAAW,CAACE,MAAZ,KAAuB,CAA3B,EAA8B;AAC7B,WAAO,EAAP;AACA;;AACD,SAAO,8BAAsBF,WAAW,CAACE,MAAlC,WACNF,WAAW,CAACS,GAAZ,CAAgB,UAAAC,WAAW;AAAA,sCAAuBA,WAAvB;AAAA,GAA3B,EAAoEC,IAApE,CAAyE,EAAzE,CADM,GAEN,eAFD;AAGA","sourcesContent":["import generateCellNumber from './generateCellNumber'\r\n\r\n// Supports \"merging cells\" across columns and rows.\r\n// https://rdrr.io/cran/openxlsx/man/mergeCells.html\r\n//\r\n// XML example:\r\n// `<sheetData>...</sheetData><mergeCells count=\"1\"><mergeCell ref=\"A2:C3\"/></mergeCells>`\r\n//\r\n// Configuration example:\r\n//\r\n// rows:\r\n// [\r\n//   [...],\r\n//   [\r\n//     { type: String, value: 'abc', span: 3, rowSpan: 2 },\r\n//     { ... },\r\n//     { ... }\r\n//   ],\r\n//   [...],\r\n// ]\r\n\r\nexport default function generateMergedCellsDescription(data, { schema }) {\r\n\tif (schema) {\r\n\t\treturn ''\r\n\t}\r\n\tconst mergedCells = []\r\n\tlet rowIndex = 0\r\n\twhile (rowIndex < data.length) {\r\n\t\tconst row = data[rowIndex]\r\n\t\tlet columnIndex = 0\r\n\t\twhile (columnIndex < row.length) {\r\n\t\t\tconst { span, rowSpan } = row[columnIndex]\r\n\t\t\tif (span) {\r\n\t\t\t\tconst rowNumber = rowIndex + 1\r\n\t\t\t\tmergedCells.push(\r\n\t\t\t\t\tgenerateCellNumber(columnIndex, rowNumber) +\r\n\t\t\t\t\t':' +\r\n\t\t\t\t\tgenerateCellNumber(columnIndex + span - 1, rowNumber + (rowSpan ? rowSpan - 1 : 0))\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcolumnIndex++\r\n\t\t}\r\n\t\trowIndex++\r\n\t}\r\n\tif (mergedCells.length === 0) {\r\n\t\treturn ''\r\n\t}\r\n\treturn `<mergeCells count=\"${mergedCells.length}\">` +\r\n\t\tmergedCells.map(coordinates => `<mergeCell ref=\"${coordinates}\"/>`).join('') +\r\n\t\t'</mergeCells>'\r\n}"],"file":"generateMergedCellsDescription.js"}