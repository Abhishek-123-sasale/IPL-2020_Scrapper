"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateRow;

var _cell = _interopRequireDefault(require("./cell"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Copy-pasted from:
// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/formatRow.js
// import Integer from '../types/Integer'
function generateRow(row, rowIndex, _ref) {
  var getStyle = _ref.getStyle,
      getSharedString = _ref.getSharedString,
      customFont = _ref.customFont;
  // To ensure the row number starts as in Excel.
  var rowNumber = rowIndex + 1;
  var rowHeight;
  var rowCells = row.map(function (cell, columnIndex) {
    var type = cell.type,
        value = cell.value,
        format = cell.format,
        align = cell.align,
        alignVertical = cell.alignVertical,
        fontWeight = cell.fontWeight,
        height = cell.height,
        wrap = cell.wrap,
        color = cell.color,
        backgroundColor = cell.backgroundColor,
        borderColor = cell.borderColor,
        borderStyle = cell.borderStyle,
        leftBorderColor = cell.leftBorderColor,
        leftBorderStyle = cell.leftBorderStyle,
        rightBorderColor = cell.rightBorderColor,
        rightBorderStyle = cell.rightBorderStyle,
        topBorderColor = cell.topBorderColor,
        topBorderStyle = cell.topBorderStyle,
        bottomBorderColor = cell.bottomBorderColor,
        bottomBorderStyle = cell.bottomBorderStyle;

    if (format && type !== Date && type !== Number) {
      // && type !== Integer) {
      throw new Error('`format` can only be used on `Date`, `Number` cells'); // or `Integer` cells')
    }

    var cellStyleId;

    if (fontWeight || align || alignVertical || format || wrap || color || backgroundColor || borderColor || borderStyle || leftBorderColor || leftBorderStyle || rightBorderColor || rightBorderStyle || topBorderColor || topBorderStyle || bottomBorderColor || bottomBorderStyle || customFont) {
      cellStyleId = getStyle(fontWeight, align, alignVertical, format, wrap, color, backgroundColor, borderColor, borderStyle, leftBorderColor, leftBorderStyle, rightBorderColor, rightBorderStyle, topBorderColor, topBorderStyle, bottomBorderColor, bottomBorderStyle);
    }

    if (height) {
      if (rowHeight === undefined || rowHeight < height) {
        rowHeight = height;
      }
    }

    return (0, _cell["default"])(rowNumber, columnIndex, value, type, cellStyleId, getSharedString);
  }).join('');
  return "<row r=\"".concat(rowNumber, "\"") + (rowHeight ? " ht=\"".concat(rowHeight, "\" customHeight=\"1\"") : '') + '>' + rowCells + '</row>';
}
//# sourceMappingURL=row.js.map