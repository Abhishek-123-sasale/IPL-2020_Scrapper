{"version":3,"sources":["../../source/write/row.js"],"names":["generateRow","row","rowIndex","getStyle","getSharedString","customFont","rowNumber","rowHeight","rowCells","map","cell","columnIndex","type","value","format","align","alignVertical","fontWeight","height","wrap","color","backgroundColor","borderColor","borderStyle","leftBorderColor","leftBorderStyle","rightBorderColor","rightBorderStyle","topBorderColor","topBorderStyle","bottomBorderColor","bottomBorderStyle","Date","Number","Error","cellStyleId","undefined","join"],"mappings":"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","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/formatRow.js\r\n\r\nimport generateCell from './cell'\r\n\r\n// import Integer from '../types/Integer'\r\n\r\nexport default function generateRow(row, rowIndex, { getStyle, getSharedString, customFont }) {\r\n\t// To ensure the row number starts as in Excel.\r\n\tconst rowNumber = rowIndex + 1\r\n\tlet rowHeight\r\n\tconst rowCells = row\r\n\t\t.map((cell, columnIndex) => {\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tvalue,\r\n\t\t\t\tformat,\r\n\t\t\t\talign,\r\n\t\t\t\talignVertical,\r\n\t\t\t\tfontWeight,\r\n\t\t\t\theight,\r\n\t\t\t\twrap,\r\n\t\t\t\tcolor,\r\n\t\t\t\tbackgroundColor,\r\n\t\t\t\tborderColor,\r\n\t\t\t\tborderStyle,\r\n\t\t\t\tleftBorderColor,\r\n\t\t\t\tleftBorderStyle,\r\n\t\t\t\trightBorderColor,\r\n\t\t\t\trightBorderStyle,\r\n\t\t\t\ttopBorderColor,\r\n\t\t\t\ttopBorderStyle,\r\n\t\t\t\tbottomBorderColor,\r\n\t\t\t\tbottomBorderStyle\r\n\t\t\t} = cell\r\n\t\t\tif (format && type !== Date &&  type !== Number) { // && type !== Integer) {\r\n\t\t\t\tthrow new Error('`format` can only be used on `Date`, `Number` cells') // or `Integer` cells')\r\n\t\t\t}\r\n\t\t\tlet cellStyleId\r\n\t\t\tif (\r\n\t\t\t\tfontWeight ||\r\n\t\t\t\talign ||\r\n\t\t\t\talignVertical ||\r\n\t\t\t\tformat ||\r\n\t\t\t\twrap ||\r\n\t\t\t\tcolor ||\r\n\t\t\t\tbackgroundColor ||\r\n\t\t\t\tborderColor ||\r\n\t\t\t\tborderStyle ||\r\n\t\t\t\tleftBorderColor ||\r\n\t\t\t\tleftBorderStyle ||\r\n\t\t\t\trightBorderColor ||\r\n\t\t\t\trightBorderStyle ||\r\n\t\t\t\ttopBorderColor ||\r\n\t\t\t\ttopBorderStyle ||\r\n\t\t\t\tbottomBorderColor ||\r\n\t\t\t\tbottomBorderStyle ||\r\n\t\t\t\tcustomFont\r\n\t\t\t) {\r\n\t\t\t\tcellStyleId = getStyle(\r\n\t\t\t\t\tfontWeight,\r\n\t\t\t\t\talign,\r\n\t\t\t\t\talignVertical,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\twrap,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tbackgroundColor,\r\n\t\t\t\t\tborderColor,\r\n\t\t\t\t\tborderStyle,\r\n\t\t\t\t\tleftBorderColor,\r\n\t\t\t\t\tleftBorderStyle,\r\n\t\t\t\t\trightBorderColor,\r\n\t\t\t\t\trightBorderStyle,\r\n\t\t\t\t\ttopBorderColor,\r\n\t\t\t\t\ttopBorderStyle,\r\n\t\t\t\t\tbottomBorderColor,\r\n\t\t\t\t\tbottomBorderStyle\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tif (height) {\r\n\t\t\t\tif (rowHeight === undefined || rowHeight < height) {\r\n\t\t\t\t\trowHeight = height\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn generateCell(\r\n\t\t\t\trowNumber,\r\n\t\t\t\tcolumnIndex,\r\n\t\t\t\tvalue,\r\n\t\t\t\ttype,\r\n\t\t\t\tcellStyleId,\r\n\t\t\t\tgetSharedString\r\n\t\t\t)\r\n\t\t})\r\n\t\t.join('')\r\n\r\n\treturn `<row r=\"${rowNumber}\"` +\r\n\t\t(rowHeight ? ` ht=\"${rowHeight}\" customHeight=\"1\"` : '') +\r\n\t\t'>' +\r\n\t\trowCells +\r\n\t\t'</row>'\r\n}"],"file":"row.js"}