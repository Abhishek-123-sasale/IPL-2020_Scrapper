{"version":3,"sources":["../../source/write/archive.js"],"names":["Archive","outputPath","output","fs","createWriteStream","archive","promise","Promise","resolve","reject","on","size","pointer","error","err","code","console","warn","pipe","filePath","internalPath","file","name","directoryPath","directory","content","append","finalize"],"mappings":";;;;;;;AAMA;;AAEA;;;;;;;;;;AAEA;AACA;AACA;IACqBA,O;AACnB,mBAAYC,UAAZ,EAAwB;AAAA;;AACtB,QAAIC,MAAJ;;AACA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,MAAM,GAAGC,eAAGC,iBAAH,CAAqBH,UAArB,CAAT;AACD,KAFD,MAEO,CACL;AACA;AACA;AACD;;AAED,QAAMI,OAAO,GAAG,0BAAS,KAAT,EAAgB,CAC9B;AACA;AAF8B,KAAhB,CAAhB;AAKA,SAAKA,OAAL,GAAeA,OAAf;;AAEA,QAAIH,MAAJ,EAAY;AACV,WAAKI,OAAL,GAAe,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9C;AACA;AACAP,QAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAmB;AAAA,iBAAMF,OAAO,CAAC;AAAEG,YAAAA,IAAI,EAAEN,OAAO,CAACO,OAAR;AAAR,WAAD,CAAb;AAAA,SAAnB,EAH8C,CAK9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAP,QAAAA,OAAO,CAACK,EAAR,CAAW,SAAX,EAAsB,UAASG,KAAT,EAAgB;AACpC,cAAIC,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAaJ,KAAb;AACD,WAHD,MAGO;AACLJ,YAAAA,MAAM,CAACI,KAAD,CAAN;AACD;AACF,SAPD,EAjB8C,CA0B9C;;AACAR,QAAAA,OAAO,CAACK,EAAR,CAAW,OAAX,EAAoBD,MAApB,EA3B8C,CA6B9C;;AACAJ,QAAAA,OAAO,CAACa,IAAR,CAAahB,MAAb;AACD,OA/Bc,CAAf;AAgCD;AACF;;;;WAED,cAAKiB,QAAL,EAAeC,YAAf,EAA6B;AAC3B,WAAKf,OAAL,CAAagB,IAAb,CAAkBF,QAAlB,EAA4B;AAAEG,QAAAA,IAAI,EAAEF;AAAR,OAA5B;AACD;;;WAED,mBAAUG,aAAV,EAAyBH,YAAzB,EAAuC;AACrC,WAAKf,OAAL,CAAamB,SAAb,CAAuBD,aAAvB,EAAsCH,YAAtC;AACD;;;WAED,gBAAOK,OAAP,EAAgBL,YAAhB,EAA8B;AAC5B,WAAKf,OAAL,CAAaqB,MAAb,CAAoBD,OAApB,EAA6B;AAAEH,QAAAA,IAAI,EAAEF;AAAR,OAA7B;AACD;;;WAED,iBAAQ;AACN;AACA,WAAKf,OAAL,CAAasB,QAAb;AACA,aAAO,KAAKrB,OAAL,IAAgB,KAAKD,OAA5B;AACD","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/catamphetamine/serverless-functions/blob/master/source/deploy/archive.js\r\n\r\n// Uses `archiver` library.\r\n// https://www.npmjs.com/package/archiver\r\n\r\nimport archiver from 'archiver'\r\n// import { WritableStream } from 'memory-streams'\r\nimport fs from 'fs'\r\n\r\n/**\r\n * A server-side *.zip archive creator.\r\n */\r\nexport default class Archive {\r\n  constructor(outputPath) {\r\n    let output\r\n    if (outputPath) {\r\n      output = fs.createWriteStream(outputPath)\r\n    } else {\r\n      // // Won't work for memory streams.\r\n      // // https://github.com/archiverjs/node-archiver/issues/336\r\n      // output = new WritableStream()\r\n    }\r\n\r\n    const archive = archiver('zip', {\r\n      // // Sets the compression level.\r\n      // zlib: { level: 9 }\r\n    })\r\n\r\n    this.archive = archive\r\n\r\n    if (output) {\r\n      this.promise = new Promise((resolve, reject) => {\r\n        // listen for all archive data to be written\r\n        // 'close' event is fired only when a file descriptor is involved\r\n        output.on('close', () => resolve({ size: archive.pointer() }))\r\n\r\n        // // This event is fired when the data source is drained no matter what was the data source.\r\n        // // It is not part of this library but rather from the NodeJS Stream API.\r\n        // // @see: https://nodejs.org/api/stream.html#stream_event_end\r\n        // archive.on('end', function() {\r\n        //   console.log('Data has been drained')\r\n        //   resolve({\r\n        //     // output: outputPath ? undefined : output.toBuffer(),\r\n        //     size: archive.pointer()\r\n        //   })\r\n        // })\r\n\r\n        // good practice to catch warnings (ie stat failures and other non-blocking errors)\r\n        archive.on('warning', function(error) {\r\n          if (err.code === 'ENOENT') {\r\n            // log warning\r\n            console.warn(error)\r\n          } else {\r\n            reject(error)\r\n          }\r\n        })\r\n\r\n        // good practice to catch this error explicitly\r\n        archive.on('error', reject)\r\n\r\n        // pipe archive data to the file\r\n        archive.pipe(output)\r\n      })\r\n    }\r\n  }\r\n\r\n  file(filePath, internalPath) {\r\n    this.archive.file(filePath, { name: internalPath })\r\n  }\r\n\r\n  directory(directoryPath, internalPath) {\r\n    this.archive.directory(directoryPath, internalPath);\r\n  }\r\n\r\n  append(content, internalPath) {\r\n    this.archive.append(content, { name: internalPath })\r\n  }\r\n\r\n  write() {\r\n    // Maybe `.finalize()` itself returns some `Promise`.\r\n    this.archive.finalize()\r\n    return this.promise || this.archive\r\n  }\r\n}\r\n"],"file":"archive.js"}