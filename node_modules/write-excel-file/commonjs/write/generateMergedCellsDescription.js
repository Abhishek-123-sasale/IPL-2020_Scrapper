"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = generateMergedCellsDescription;

var _generateCellNumber = _interopRequireDefault(require("./generateCellNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Supports "merging cells" across columns and rows.
// https://rdrr.io/cran/openxlsx/man/mergeCells.html
//
// XML example:
// `<sheetData>...</sheetData><mergeCells count="1"><mergeCell ref="A2:C3"/></mergeCells>`
//
// Configuration example:
//
// rows:
// [
//   [...],
//   [
//     { type: String, value: 'abc', span: 3, rowSpan: 2 },
//     { ... },
//     { ... }
//   ],
//   [...],
// ]
function generateMergedCellsDescription(data, _ref) {
  var schema = _ref.schema;

  if (schema) {
    return '';
  }

  var mergedCells = [];
  var rowIndex = 0;

  while (rowIndex < data.length) {
    var row = data[rowIndex];
    var columnIndex = 0;

    while (columnIndex < row.length) {
      var _row$columnIndex = row[columnIndex],
          span = _row$columnIndex.span,
          rowSpan = _row$columnIndex.rowSpan;

      if (span) {
        var rowNumber = rowIndex + 1;
        mergedCells.push((0, _generateCellNumber["default"])(columnIndex, rowNumber) + ':' + (0, _generateCellNumber["default"])(columnIndex + span - 1, rowNumber + (rowSpan ? rowSpan - 1 : 0)));
      }

      columnIndex++;
    }

    rowIndex++;
  }

  if (mergedCells.length === 0) {
    return '';
  }

  return "<mergeCells count=\"".concat(mergedCells.length, "\">") + mergedCells.map(function (coordinates) {
    return "<mergeCell ref=\"".concat(coordinates, "\"/>");
  }).join('') + '</mergeCells>';
}
//# sourceMappingURL=generateMergedCellsDescription.js.map