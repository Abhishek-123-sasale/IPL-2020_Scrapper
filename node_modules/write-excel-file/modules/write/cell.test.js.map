{"version":3,"sources":["../../source/write/cell.test.js"],"names":["generateCell","describe","it","expect","to","String","undefined","equal","Number","cellStyleId","Date"],"mappings":"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","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/__test__/formatters/cells/formatCell.spec.js\r\n\r\nimport generateCell from './cell'\r\n\r\n// import Integer from '../types/Integer'\r\n// import Email from '../types/Email'\r\n// import URL from '../types/URL'\r\n\r\ndescribe('generateCell()', () => {\r\n  describe('Create a cell of type Sting', () => {\r\n    it('should throw if invalid type was supplied', () => {\r\n      expect(() => generateCell(1, 0, 'Test', 'Unsupported'))\r\n        .to.throw('Unknown schema type: Unsupported')\r\n    })\r\n\r\n    it('should create a cell', () => {\r\n      expect(generateCell(1, 0, 'Test', String, undefined, () => 0)).to.equal(\r\n        // '<c r=\"A1\" t=\"inlineStr\"><is><t>Test</t></is></c>'\r\n        '<c r=\"A1\" t=\"s\"><v>0</v></c>'\r\n      )\r\n    })\r\n  })\r\n\r\n  describe('Create a cell of type Number', () => {\r\n    it('should create a cell', () => {\r\n      expect(generateCell(1, 1, 1000, Number))\r\n        .to.equal('<c r=\"B1\"><v>1000</v></c>')\r\n    })\r\n\r\n    it('should create a cell with a cell style ID', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 1, 1000, Number, cellStyleId))\r\n        .to.equal(`<c r=\"B1\" s=\"${cellStyleId}\"><v>1000</v></c>`)\r\n    })\r\n  })\r\n\r\n  // describe('Create a cell of type Integer', () => {\r\n  //   it('Create a cell', () => {\r\n  //     expect(generateCell(1, 1, 1000, Integer)).to.equal('<c r=\"B1\"><v>1000</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  // describe('Create a cell of type URL', () => {\r\n  //   it('should create a cell', () => {\r\n  //     expect(generateCell(1, 1, 'https://google.com', URL, undefined, () => 0))\r\n  //       // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>https://google.com</t></is></c>')\r\n  //       .to.equal('<c r=\"B1\" t=\"s\"><v>0</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  // describe('Create a cell of type Email', () => {\r\n  //   it('should create a cell', () => {\r\n  //     expect(generateCell(1, 1, 'example@domain.com', Email, undefined, () => 0))\r\n  //       // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>example@domain.com</t></is></c>')\r\n  //       .to.equal('<c r=\"B1\" t=\"s\"><v>0</v></c>')\r\n  //   })\r\n  // })\r\n\r\n  describe('Create a cell of type Date', () => {\r\n    it('should throw if no date format was supplied', () => {\r\n      expect(() => generateCell(1, 0, new Date(2020, 11, 30), Date))\r\n        .to.throw('No \"format\"')\r\n    })\r\n\r\n    it('should create a cell', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, new Date(2020, 11, 30), Date, cellStyleId, () => 0))\r\n        // .to.equal('<c r=\"B1\" t=\"inlineStr\"><is><t>example@domain.com</t></is></c>')\r\n        .to.equal(`<c r=\"A1\" s=\"${cellStyleId}\"><v>44194.875</v></c>`)\r\n    })\r\n\r\n    it('should create an empty cell (`undefined`) (has custom style)', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, undefined, Date, cellStyleId, () => 0))\r\n        .to.equal('<c r=\"A1\" s=\"123\"/>')\r\n    })\r\n\r\n    it('should create an empty cell (`undefined`) (no custom style)', () => {\r\n      const cellStyleId = undefined\r\n      expect(generateCell(1, 0, undefined, Date, cellStyleId, () => 0))\r\n        .to.equal('')\r\n    })\r\n\r\n    it('should create an empty cell (`null`) (has custom style)', () => {\r\n      const cellStyleId = 123\r\n      expect(generateCell(1, 0, null, Date, cellStyleId, () => 0))\r\n        .to.equal('<c r=\"A1\" s=\"123\"/>')\r\n    })\r\n\r\n    it('should create an empty cell (`null`) (no custom style)', () => {\r\n      const cellStyleId = undefined\r\n      expect(generateCell(1, 0, null, Date, cellStyleId, () => 0))\r\n        .to.equal('')\r\n    })\r\n  })\r\n})"],"file":"cell.test.js"}