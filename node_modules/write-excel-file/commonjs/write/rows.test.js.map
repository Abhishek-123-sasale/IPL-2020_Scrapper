{"version":3,"sources":["../../source/write/rows.test.js"],"names":["describe","it","expect","value","type","String","Number","getSharedString","string","to","equal"],"mappings":";;AAAA;;AAEA;;;;AAEAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/BC,IAAAA,MAAM,CAAC,sBAAa,CAAC,CAAC;AACpBC,MAAAA,KAAK,EAAE,MADa;AAEpBC,MAAAA,IAAI,EAAEC;AAFc,KAAD,EAGlB;AACDF,MAAAA,KAAK,EAAE,IADN;AAEDC,MAAAA,IAAI,EAAEE;AAFL,KAHkB,CAAD,CAAb,EAMF;AACHC,MAAAA,eADG,2BACaC,MADb,EACqB;AACtB,eAAO,CAAP;AACD;AAHE,KANE,CAAD,CAAN,CAUIC,EAVJ,CAUOC,KAVP,EAWC;AACA,4EAZD;AAcD,GAfC,CAAF;AAgBD,CAjBO,CAAR","sourcesContent":["import generateRows from './rows'\r\n\r\nimport SharedStrings from './sharedStrings'\r\n\r\ndescribe('generateRows()', () => {\r\n  it('should generate rows', () => {\r\n    expect(generateRows([[{\r\n      value: 'Test',\r\n      type: String\r\n    }, {\r\n      value: 1000,\r\n      type: Number\r\n    }]], {\r\n      getSharedString(string) {\r\n        return 0\r\n      }\r\n    })).to.equal(\r\n    \t// '<row r=\"1\"><c r=\"A1\" t=\"inlineStr\"><is><t>Test</t></is></c><c r=\"B1\"><v>1000</v></c></row>'\r\n    \t'<row r=\"1\"><c r=\"A1\" t=\"s\"><v>0</v></c><c r=\"B1\"><v>1000</v></c></row>'\r\n    )\r\n  })\r\n})"],"file":"rows.test.js"}